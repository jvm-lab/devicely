"""
Module to process Muse data from the mind moitor application
"""

import os
import random

import numpy as np
import pandas as pd

from helpers import file_empty_or_not_existing


class MuseReader:
    """
    Parses, timeshifts and writes data generated by the Muse S headband using the Mind Monitor application.

    Attributes
    ----------
    data : DataFrame
        Joined dataframe of all individual signal dataframes (see
        above). May contain NaN values because sampling frequencies differ
        across signals.
    """

    def __init__(self, path):
        """
        Parse the csv files located in the specified directory into dataframes.

        Parameters
        ----------
        path : str
            Path of the directory that contains the recorded the csv file

        Raises
        ------
        Exception
            In case path is not specified.
        """
        if not file_empty_or_not_existing(path):
            self.data = pd.read_csv(path)
        else:
            raise Exception('The file you are trying to load does not exist or is empty')


    def write(self, path, name):
        """
        Write the dataframe back into a csv file with the same format as the original file.

        Parameters
        ----------
        path : str
            Path of the directory in which the csv files are created.
            If the directory doe not exist, it will be created.
            
        name : str
            Name of the file that should be created
        
        Raises
        ------
        Exception
            In case path is not specified.
        """

        if not path:
            raise Exception('Please specify a path to save the file.')

        if path[-1] != '/':
            path += '/'    
        if not os.path.exists(path):
            os.mkdir(path)
        self.data.to_csv(path+name+'.csv')


    def timeshift(self, shift='random'):
        """
        Shift all time related columns as well as the starting_times dict.

        Parameters
        ----------
        shift : None/'random', pd.Timestamp or pd.Timedelta
            If shift is not specified, shifts the data by a random time interval
            between one month and two years to the past.

            If shift is a timdelta, shifts the data by that timedelta.

            If shift is a timestamp, shifts the data such that the earliest entry
            is at that timestamp and the remaining values keep the same
            time distance to the first entry.
        """

        if shift == 'random':
            one_month = pd.Timedelta('- 30 days').value
            two_years = pd.Timedelta('- 730 days').value
            random_timedelta = pd.Timedelta(random.uniform(one_month, two_years))
            self._shift(random_timedelta)

        dfs = [df for df in [self.BVP, self.EDA, self.HR, self.TEMP, self.ACC, self.IBI] if df is not None]

        if isinstance(shift, pd.Timestamp):
            strattime = pd.Timestamp(df['TimeStamp'][0])
            timedelta = shift - starttime
            self._shift(timedelta)

        if isinstance(shift, pd.Timedelta):
            self._shift(shift)

    def _shift(delta):
        self.data['TimeStamp'] = self.data['TimeStamp'].apply(lambda x: (pd.Timestamp(x) + delta).strftime("%Y-%m-%d %H:%M:%S.%s"))

